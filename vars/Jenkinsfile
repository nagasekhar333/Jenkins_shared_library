// cleanWorkspace.groovy

def cleanWorkspace() {
    cleanWs()
}

def checkoutGit(String gitUrl, String gitBranch) {
    checkout([
        $class: 'GitSCM',
        branches: [[name: gitBranch]],
        userRemoteConfigs: [[url: gitUrl]]
    ])
}

def runSonarQubeAnalysis() {
    withSonarQubeEnv('sonar-server') {
        sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Youtube -Dsonar.projectKey=Youtube'''
    }
}

def waitForQualityGate(String credentialsId) {
    waitForQualityGate(abortPipeline: false, credentialsId: credentialsId)
}

def installNpmPackages() {
    sh 'npm install'
}

def runTrivyFsScan() {
    sh 'trivy fs . > trivyfs.txt'
}

def buildAndPushDockerImage(String dockerHubUsername, String imageName) {
    // Build the Docker image
    sh "docker build --build-arg REACT_APP_RAPID_API_KEY=f0ead79813mshb0aa -t ${imageName} ."
    // Tag the Docker image
    sh "docker tag ${imageName} ${dockerHubUsername}/${imageName}:latest"
    // Push the Docker image
    withDockerRegistry([url: 'https://index.docker.io/v1/', credentialsId: 'docker']) {
        sh "docker push ${dockerHubUsername}/${imageName}:latest"
    }
}

def runTrivyImageScan() {
    sh 'trivy image sevenajay/youtube:latest > trivyimage.txt'
}

def startDockerContainer() {
    sh "docker run -d --name youtube1 -p 3000:3000 sevenajay/youtube:latest"
}

def stopAndRemoveDockerContainer() {
    sh 'docker stop youtube1'
    sh 'docker rm youtube1'
}

def applyKubernetesDeployment() {
    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
        sh "kubectl apply -f deployment.yml"
    }
}

def deleteKubernetesDeployment() {
    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
        sh "kubectl delete -f deployment.yml"
    }
}
