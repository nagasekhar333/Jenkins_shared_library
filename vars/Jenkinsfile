@Library('Jenkins_shared_library') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'delete'], description: 'Select create or destroy.')
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWorkspace()
            }
        }

        stage('Checkout from Git') {
            steps {
                checkoutGit('https://github.com/Aj7Ay/Youtube-clone-app.git', 'main')
            }
        }

        stage('SonarQube Analysis') {
            when { expression { params.action == 'create' } }
            steps {
                sonarqubeAnalysis()
            }
        }

        stage('SonarQube Quality Gate') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    def credentialsId = 'Sonar-token'
                    qualityGate(credentialsId)
                }
            }
        }

        stage('Npm') {
            when { expression { params.action == 'create' } }
            steps {
                npmInstall()
            }
        }

        stage('Trivy File Scan') {
            when { expression { params.action == 'create' } }
            steps {
                trivyFs()
            }
        }

        stage('OWASP FS Scan') {
            when { expression { params.action == 'create' } }
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Docker Build') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    def dockerHubUsername = params.DOCKER_HUB_USERNAME
                    def imageName = params.IMAGE_NAME
                    dockerBuild(dockerHubUsername, imageName)
                }
            }
        }

        stage('Trivy Image') {
            when { expression { params.action == 'create' } }
            steps {
                trivyImage()
            }
        }

        stage('Run Container') {
            when { expression { params.action == 'create' } }
            steps {
                runContainer()
            }
        }

        stage('Remove Container') {
            when { expression { params.action == 'delete' } }
            steps {
                removeContainer()
            }
        }

        stage('Kube Deploy') {
            when { expression { params.action == 'create' } }
            steps {
                kubeDeploy()
            }
        }

        stage('Kube Delete') {
            when { expression { params.action == 'delete' } }
            steps {
                kubeDelete()
            }
        }
    }
}
